name: Docker CI Pipeline

on:
  push:
    branches:
      - master
    tags:
      - '*'
  schedule:
    - cron: '0 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64v8]
    env:
      IMAGE_TAG: ${{ github.run_id }}
    steps:
      - uses: actions/checkout@v3

      # Set up QEMU for multi-architecture builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to your container registry
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.CI_REGISTRY_USER }}
          password: ${{ secrets.CI_REGISTRY_PASSWORD }}

      # Set build arguments for BUILD_DATE and VCS_REF
      - name: Set Build Date and VCS Ref
        run: |
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
          echo "VCS_REF=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      # Build the image for the current architecture
      - name: Build image for ${{ matrix.arch }}
        run: |
          docker build \
            --build-arg ARCH=${{ matrix.arch }} \
            --build-arg BUILD_DATE=$BUILD_DATE \
            --build-arg VCS_REF=$VCS_REF \
            -t ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-${{ matrix.arch }} .

      # Push the built image to your container registry
      - name: Push image for ${{ matrix.arch }}
        run: docker push ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    env:
      IMAGE_TAG: ${{ github.run_id }}
    steps:
      # Enable Docker experimental features (required for manifest commands)
      - name: Setup Docker Experimental Features
        run: |
          mkdir -p $HOME/.docker || true
          echo '{"experimental": "enabled"}' > $HOME/.docker/config.json

      # Log in to your container registry
      - name: Login to Container Registry
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }} ${{ secrets.CI_REGISTRY }}

      # Tag the images as "latest-arch" and create a multi-arch manifest for "latest"
      - name: Tag and push images with multi-arch manifest
        run: |
          docker pull ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-amd64
          docker tag ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-amd64 ${{ secrets.CI_REGISTRY_IMAGE }}:latest-amd64
          docker push ${{ secrets.CI_REGISTRY_IMAGE }}:latest-amd64

          docker pull ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-arm64v8
          docker tag ${{ secrets.CI_REGISTRY_IMAGE }}:${IMAGE_TAG}-arm64v8 ${{ secrets.CI_REGISTRY_IMAGE }}:latest-arm64v8
          docker push ${{ secrets.CI_REGISTRY_IMAGE }}:latest-arm64v8

          docker manifest create ${{ secrets.CI_REGISTRY_IMAGE }}:latest \
            ${{ secrets.CI_REGISTRY_IMAGE }}:latest-amd64 \
            ${{ secrets.CI_REGISTRY_IMAGE }}:latest-arm64v8

          docker manifest annotate --os linux --arch amd64 ${{ secrets.CI_REGISTRY_IMAGE }}:latest ${{ secrets.CI_REGISTRY_IMAGE }}:latest-amd64
          docker manifest annotate --os linux --arch arm64 --variant v8 ${{ secrets.CI_REGISTRY_IMAGE }}:latest ${{ secrets.CI_REGISTRY_IMAGE }}:latest-arm64v8

          docker manifest push ${{ secrets.CI_REGISTRY_IMAGE }}:latest
